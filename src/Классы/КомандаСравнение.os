///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды <diff>
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

Перем РодительПуть;
Перем ПоставкаПуть;
Перем РасширениеПуть;

Перем ФайлРезультатИмя;

///////////////////////////////////////////////////////////////////////////////

// настрока команды
// 
// Параметры:
//   Команда - ОписаниеКоманды - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогОсновнойКонфигурации", "Каталог основной конфигурации");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогПоставки", "Каталог поставки");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогРасширения", "Каталог расширения");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ФайлРезультат", "Файл-отчет, результат сравнения конфигураций");

	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-edt", "Использовать формат EDT");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-onlyImportant", "Игнорировать изменения в комментариях, табуляции, переводах строки");
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	Лог = Приложение.ПолучитьЛог();

	РодительПуть = ПараметрыКоманды["КаталогОсновнойКонфигурации"];
	ПоставкаПуть = ПараметрыКоманды["КаталогПоставки"];
	РасширениеПуть = ПараметрыКоманды["КаталогРасширения"];
	ЭтоФорматEDT = ПараметрыКоманды["-edt"];
	ПоказыватьТолькоВажныеИзменения = ПараметрыКоманды["-onlyImportant"];	

	Если Не ПроверитьКаталог(РодительПуть, "Каталог основной конфигурации", Лог) 
		ИЛИ Не ПроверитьКаталог(ПоставкаПуть, "Каталог поставки", Лог)
		ИЛИ Не ПроверитьКаталог(РасширениеПуть, "Каталог расширения", Лог) Тогда

		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;

	КонецЕсли;

	РаздлительПути = ПолучитьРазделительПути();
	РасширениеПуть = ?(СтрЗаканчиваетсяНа(РасширениеПуть, РаздлительПути), 
		РасширениеПуть, РасширениеПуть + РаздлительПути);

	ФайлРезультатИмя = ПараметрыКоманды["ФайлРезультат"];

	Лог.Информация("Получаем результат сравнения");
	РезультатСравнения = РезультатСравненияРасширения.ПолучитьРезультатСравнения(
		ЭтоФорматEDT,
		РодительПуть, 
		ПоставкаПуть, 
		РасширениеПуть, 
		Лог);

	Лог.Информация("Сохраняем результат сравнения: %1", ФайлРезультатИмя);
	Генератор = Новый ГенераторОтчета;
	Генератор.СохранитьРезультат(РезультатСравнения, ФайлРезультатИмя, Лог, "HTML", ПоказыватьТолькоВажныеИзменения);
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду

///////////////////////////////////////////////////////////////////////////////

Функция ПроверитьКаталог(КаталогПроверки, НазначениеКаталога, Лог)

	ФайлКаталогПроверки = Новый Файл(КаталогПроверки);

	Если НЕ ФайлКаталогПроверки.Существует() ИЛИ ФайлКаталогПроверки.ЭтоФайл() Тогда
		Лог.Ошибка("%1 '%2' не существует или это файл", НазначениеКаталога, КаталогПроверки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции