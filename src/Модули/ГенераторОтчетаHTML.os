///////////////////////////////////////////////////////////////////
//
// Модуль генератора отчета в формате HTML
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

Перем РасширениеПуть;
Перем РодительПуть;
Перем ПоставкаПуть;

Перем Лог;

// Сохраняет результат в формате HTML
//
// Параметры:
//   РезультатСравнения - Структура - Результат сравнения конфигураций и расширения
//   ИмяФайлаРезультата - Строка - Полное имя файла, в который будет записан результат сравнения
//   Лог - log-manager - Экземпляр класса логирования
//
Процедура СохранитьРезультат(РезультатСравнения, ИмяФайлаРезультата, ПараметрЛог, ПоказыватьТолькоВажныеИзменения = Ложь) Экспорт

	РодительПуть = РезультатСравнения.РодительПуть;
	ПоставкаПуть = РезультатСравнения.ПоставкаПуть;
	РасширениеПуть = РезультатСравнения.РасширениеПуть;

	Лог = ПараметрЛог;

	СоответствиеШаблонов = Новый Соответствие();
	СоответствиеШаблонов.Вставить("Шаблон", ТекстШаблон());
	СоответствиеШаблонов.Вставить("Блок", ТекстБлок());
	СоответствиеШаблонов.Вставить("Таблица", ТекстТаблица());

	НаследованиеБлоков = Новый Соответствие();
	НаследованиеБлоков.Вставить("Корень", Новый Структура("Блок, Объекты", "Тип", "Объекты"));
	НаследованиеБлоков.Вставить("Тип", Новый Структура("Блок, Объекты", "Объект", "Модули"));
	НаследованиеБлоков.Вставить("Объект", Новый Структура("Блок, Объекты", "Модуль", "Методы"));

	Лог.Информация("Начало формирования отчета...");
	
	Попытка
		ТекстРезультат = ВывестиБлок(РезультатСравнения.Типы, "Корень", СоответствиеШаблонов, НаследованиеБлоков, ПоказыватьТолькоВажныеИзменения);
	Исключение
		Лог.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Сохранение отчета...");
	ФайлРезультат = Новый ТекстовыйДокумент;
	ФайлРезультат.УстановитьТекст(ТекстРезультат);
	ФайлРезультат.Записать(ИмяФайлаРезультата, КодировкаТекста.UTF8NoBOM);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВывестиБлок(ВходящиеДанные, ИмяБлока, СоответствиеШаблонов, НаследованиеБлоков, ПоказыватьТолькоВажныеИзменения = Ложь)

	// ИмяБлока 
	//		- Корень (справочники, документы и т.д.)
	//		- Тип - объекты одного типа (Спр1, Док1, ...)
	//		- Объект - модули
	//		- Модуль
	//		- Метод

	ТекстРезультат = "";
	ТекстОтчет = "";

	Если СтрНайти("Корень;Тип;Объект", ИмяБлока) Тогда

		Для каждого ОбъектСравнения Из ВходящиеДанные Цикл

			ТекстОбъекты = ВывестиБлок(ОбъектСравнения[НаследованиеБлоков[ИмяБлока].Объекты], 
				НаследованиеБлоков[ИмяБлока].Блок, СоответствиеШаблонов, НаследованиеБлоков, ПоказыватьТолькоВажныеИзменения);

			Если Не ПустаяСтрока(ТекстОбъекты) Тогда
				ТекстОтчет = ТекстОтчет + СтрШаблон(СоответствиеШаблонов["Блок"], 
					ПредставлениеОбъекта(ИмяБлока, ОбъектСравнения), ТекстОбъекты);
			КонецЕсли;

		КонецЦикла;
		
		ТекстРезультат = ?(ИмяБлока = "Корень", 
			СтрШаблон(СоответствиеШаблонов["Шаблон"], ТекстCSS(), ТекстПодпись(), ТекстОтчет), 
			ТекстОтчет);

	ИначеЕсли ИмяБлока = "Модуль" Тогда

		Для каждого Метод Из ВходящиеДанные Цикл

			ТелоРодителя = "";
			Метод.Свойство("Родитель", ТелоРодителя);
			ТелоПоставки = "";
			Метод.Свойство("Поставка", ТелоПоставки);
			ТелоРасширения = Метод.ТелоМетода;

			Если ПоказыватьТолькоВажныеИзменения Тогда
				ТелоРодителяДляСравнения = ЗначищиеСимволы(ТелоРодителя);
				ТелоПоставкиДляСравнения = ЗначищиеСимволы(ТелоПоставки);
			Иначе
				ТелоРодителяДляСравнения = ТелоРодителя;
				ТелоПоставкиДляСравнения = ТелоПоставки;
			КонецЕсли;
			
			Если ТелоРодителяДляСравнения <> ТелоПоставкиДляСравнения Тогда

				СравнитьДваТекста(ТелоРодителя, ТелоПоставки);

				ТекстОтчет = ТекстОтчет + 
					СтрШаблон(СоответствиеШаблонов["Блок"], Метод.ТипМетода + " <b>" + Метод.ИмяМетодаБезПрефикса + "</b>",
					СтрШаблон(СоответствиеШаблонов["Таблица"], ТелоРодителя, ТелоПоставки, ТелоРасширения));

			КонецЕсли;

		КонецЦикла;

		ТекстРезультат = ТекстОтчет;

	КонецЕсли;

	Возврат ТекстРезультат;

КонецФункции

Функция ПредставлениеОбъекта(ИмяБлока, ОбъектСравнения)

	Если ИмяБлока = "Корень" Тогда

		ТекстРезультат = СтрШаблон("<b><span style=""color: DarkSlateGray;"">%1</span></b>", ОбъектСравнения.Тип);

	ИначеЕсли ИмяБлока = "Тип" Тогда

		ТекстРезультат = СтрШаблон("<span style=""color: SteelBlue;"">%1</span>", ОбъектСравнения.Имя);

	ИначеЕсли ИмяБлока = "Объект" Тогда

		ТекстРезультат = СтрЗаменить(ОбъектСравнения.ФайлМодуля.ПолноеИмя, РасширениеПуть, "");
		Если ОбъектСравнения.Свойство("ИмяПереопределяемого") Тогда
			ТекстРезультат = ТекстРезультат + СтрШаблон(
				" (<span style=""color: SeaGreen;"">%1</span>)", 
				ОбъектСравнения.ИмяПереопределяемого);
		КонецЕсли;

	Иначе

		ТекстРезультат = "";

	КонецЕсли;

	Возврат ТекстРезультат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ТекстПодпись()

	Возврат "Основная конфигурация: " + РодительПуть + "
	|Поставка конфигурации: " + ПоставкаПуть + "
	|Расширение: " + РасширениеПуть + "
	|Дата формирования: " + ТекущаяДата();

КонецФункции

Функция ТекстШаблон()

	Возврат 
	"<!DOCTYPE HTML>
	|<HTML>
	|	<HEAD>
	|		<META content=""text/html; charset=utf-8"" http-equiv=Content-Type text html;>
	|		%1
	|	</HEAD>
	|	<BODY>
	|		<h3><b>Анализ расширения</b></h3>
	|		<pre>%2</pre>
	|		<P></P>
	|		<div class=""treeHTML"">
	|		%3
	|		</div>
	|		<P>&nbsp;</P> 
	|	</BODY>
	|</HTML>";

КонецФункции

Функция ТекстCSS()

	Возврат "
	|<STYLE>
	|	TABLE {
	|		BORDER: black 1px solid;
	|		PADDING: 0px;
	|		border-collapse: collapse;
	|		width: 100%;
	|		table-layout: fixed;
	|	}

	|	TH {
	|		TEXT-ALIGN: center;
	|		BORDER: black 1px solid;
	|		font-family: 'Courier New', Courier, monospace;
	|	}

	|	TD {
	|		/* width: 33%; */
	|		vertical-align: top;
	|		BORDER: black 1px solid;
	|	}

	|	PRE {
	|		font-family: 'Courier New', Courier, monospace;
	|		font-size: smaller;
	|	}

	|	.treeHTML {
	|		line-height: normal;
	|	}

	|	.treeHTML details {
	|		display: block;
	|	}

	|	.treeHTML div {
	|		font-size: 3;
	|		position: relative;
	|		margin: 0 0 0 .5em;
	|		padding: 0 0 0 1.2em;
	|	}

	|	.treeHTML div:not(:last-child) {
	|		border-left: 1px solid #ccc;
	|	}

	|	.treeHTML div:before {
	|		position: absolute;
	|		top: 0;
	|		left: 0;
	|		width: 1.1em;
	|		height: .5em;
	|		border-bottom: 1px solid #ccc;
	|	}

	|	.treeHTML div:last-child:before {
	|		border-left: 1px solid #ccc;
	|	}

	|	.treeHTML DIV.DELPARENT:before {
	|		content: ""-"";
	|		position: static;
	|		content: none;
	|		width: 0;
	|		height: 0;
	|		border-bottom: none;
	|	}

	|	.treeHTML DIV.method {
	|		width: 100%;
	|		height: 500px;
	|		font-family: 'Courier New', Courier, monospace;
	|		font-size: small;
	|		overflow: auto;
	|		margin: 0;
	|		padding: 0;
	|		white-space: pre;
	|	}

	|	.treeHTML DIV.method:before {
	|		/* position: static; */
	|		content: none;
	|		width: 0;
	|		height: 0;
	|		border-bottom: none;
	|	}

	|	.treeHTML DIV.DELPARENT {
	|		background: RosyBrown;
	|	}

	|	.treeHTML summary {
	|		font-family: Geneva, Arial, Helvetica, sans-serif;
	|		top: 0;
	|		left: 0;
	|		cursor: pointer;
	|	}

	|	.treeHTML details[open] summary {
	|		outline: none;
	|	}
	|</STYLE>
	|";

КонецФункции

Функция ТекстБлок()

	Возврат "
	|	<details>
	|		<summary>%1</summary>
	|		<div>
	|			%2
	|		</div>
	|	</details>
	|";

КонецФункции

Функция ТекстТаблица()

	Возврат "
	|<table>
	|	<tbody>
	|		<tr>
	|			<th>Основная конфигурация</th>
	|			<th>Поставка</th>
	|			<th>Расширение</th>
	|		</tr>
	|		<tr>
	|			<td>
	|				<div class=""method"" contenteditable=""true"" readonly=""readonly"">%1</div>
	|			</td>
	|			<td>
	|				<div class=""method"" contenteditable=""true"" readonly=""readonly"">%2</div>
	|			</td>
	|			<td>
	|				<div class=""method"" contenteditable=""true"" readonly=""readonly"">%3</div>
	|			</td>
	|		</tr>
	|	</tbody>
	|</table>
	|";

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////

Функция НайтиСтрокуДалее(СтрокаПоиска, Масс, Знач Старт)

	Пока Старт < Масс.Количество() Цикл

		Если СокрЛП(СтрокаПоиска) = СокрЛП(Масс[Старт]) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Старт = Старт + 1;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

Процедура СравнитьДваТекста(Текст1, Текст2)

	Масс1 = СтрРазделить(Текст1, Символы.ПС);
	Масс2 = СтрРазделить(Текст2, Символы.ПС);
	
	Сч = 0;
	
	Пока Сч < Макс(Масс1.Количество(), Масс2.Количество()) Цикл
		
		Если Сч > Масс1.ВГраница() Тогда // В родительском массиве кончились строки
			Масс2[Сч] = ДобавитьТегСтрокаДобавлена(Масс2[Сч]);
		ИначеЕсли Сч > Масс2.ВГраница() Тогда // В массиве наследнике кончились строки
			Масс1[Сч] = ДобавитьТегСтрокаУдалена(Масс1[Сч]);
		ИначеЕсли СокрЛП(Масс1[Сч]) <> СокрЛП(Масс2[Сч]) Тогда // строки не равны
			
			Если НайтиСтрокуДалее(Масс2[Сч], Масс1, Сч) Тогда // ищем в первом массиве строку второго
				Масс2.Вставить(Сч, "");
				Масс1[Сч] = ДобавитьТегСтрокаУдалена(Масс1[Сч]);
			Иначе
				Масс1.Вставить(Сч, "");
				Масс2[Сч] = ДобавитьТегСтрокаДобавлена(Масс2[Сч]);
			КонецЕсли;
	
		КонецЕсли;
	
		Сч = Сч + 1;
		
	КонецЦикла;

	Текст1 = СтрСоединить(Масс1, Символы.ПС);
	Текст2 = СтрСоединить(Масс2, Символы.ПС);
	
КонецПроцедуры

Функция ДобавитьТегСтрокаУдалена(СтрокаТекста)

	Возврат СтрШаблон("<span style=""background:LightPink"">%1</span>", СтрокаТекста);

КонецФункции

Функция ДобавитьТегСтрокаДобавлена(СтрокаТекста)

	Возврат СтрШаблон("<span style=""background:PaleGreen"">%1</span>", СтрокаТекста);

КонецФункции

Функция ЗначищиеСимволы(Текст)
	//ПаттернПрефикса = "\r?\n|\r|\t|(\/\/.*?$)";
	ПаттернПрефикса = "(\/\/.*?$)|\r?\n|\r|\s+(?=([^""]*""[^""]*"")*[^""]*$)";
	Регексп = Новый РегулярноеВыражение(ПаттернПрефикса);
	Возврат Регексп.Заменить(Текст, "");
КонецФункции