///////////////////////////////////////////////////////////////////
//
// Модуль генератора отчета в формате HTML
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

Перем РасширениеПуть;
Перем РодительПуть;
Перем ПоставкаПуть;
Перем КаталогРодитель;
Перем КаталогПоставка;
Перем КаталогРасширение;
Перем НаследованиеБлоков;

Перем Лог;

// Сохраняет результат в формате HTML
//
// Параметры:
//   РезультатСравнения - Структура - Результат сравнения конфигураций и расширения
//   КаталогРезультата - Строка - Полное имя файла, в который будет записан результат сравнения
//   Лог - log-manager - Экземпляр класса логирования
//
Процедура СохранитьРезультат(РезультатСравнения, КаталогРезультата, ПараметрЛог, ПоказыватьТолькоВажныеИзменения = Ложь, kdiff3Path = "") Экспорт

	РодительПуть = РезультатСравнения.РодительПуть;
	ПоставкаПуть = РезультатСравнения.ПоставкаПуть;
	РасширениеПуть = РезультатСравнения.РасширениеПуть;

	Лог = ПараметрЛог;
	
	СоздатьКаталоги(КаталогРезультата);

	НаследованиеБлоков = Новый Соответствие();
	НаследованиеБлоков.Вставить("Корень", Новый Структура("Блок, Объекты", "Тип", "Объекты"));
	НаследованиеБлоков.Вставить("Тип", Новый Структура("Блок, Объекты", "Объект", "Модули"));
	НаследованиеБлоков.Вставить("Объект", Новый Структура("Блок, Объекты", "Модуль", "Методы"));

	Лог.Информация("Начало формирования каталога с данными...");
	
	Попытка
		ТекстРезультат = ВывестиБлок(РезультатСравнения.Типы, "Корень", ПоказыватьТолькоВажныеИзменения);
	Исключение
		Лог.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Каталог с данными сформирован...");
	МассивЗапуска = Новый Массив;
	Шаблон = """%1""";
	МассивЗапуска.Добавить(СтрШаблон(Шаблон, kdiff3Path));
	МассивЗапуска.Добавить(КаталогРодитель);	
	МассивЗапуска.Добавить(КаталогПоставка);
	МассивЗапуска.Добавить(КаталогРасширение);
	МассивЗапуска.Добавить("--cs ""SkipDirStatus=1""");
	МассивЗапуска.Добавить("--cs ""EncodingForA=UTF-8""");
	МассивЗапуска.Добавить("--cs ""EncodingForB=UTF-8""");
	МассивЗапуска.Добавить("--cs ""EncodingForC=UTF-8""");
	МассивЗапуска.Добавить("--cs ""EncodingForOutput=UTF-8""");
	МассивЗапуска.Добавить("--cs ""EncodingForPP=UTF-8""");
	
	СтрокаЗапуска = СтрСоединить(МассивЗапуска, " ");
	Лог.Информация("Запускаем сравнение каталогов:%1...", СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВывестиБлок(ВходящиеДанные, ИмяБлока, ПоказыватьТолькоВажныеИзменения = Ложь, Знач ТекущийКаталог = "")

	// ИмяБлока 
	//		- Корень (справочники, документы и т.д.)
	//		- Тип - объекты одного типа (Спр1, Док1, ...)
	//		- Объект - модули
	//		- Модуль
	//		- Метод

	ТекстРезультат = "";
	ТекстОтчет = "";


	Если СтрНайти("Корень;Тип;Объект", ИмяБлока) Тогда

		Для каждого ОбъектСравнения Из ВходящиеДанные Цикл
			Если  ИмяБлока = "Корень"  Тогда
				НовыйКаталог = ОбъектСравнения.Тип;
			ИначеЕсли ИмяБлока = "Тип" Тогда
				НовыйКаталог = ОбъединитьПути(ТекущийКаталог, ОбъектСравнения.Имя);
			Иначе	
				НовыйКаталог = ТекущийКаталог;
			КонецЕсли;
			ТекстОбъекты = ВывестиБлок(ОбъектСравнения[НаследованиеБлоков[ИмяБлока].Объекты], 
				НаследованиеБлоков[ИмяБлока].Блок, ПоказыватьТолькоВажныеИзменения, НовыйКаталог);

		КонецЦикла;
		
	ИначеЕсли ИмяБлока = "Модуль" Тогда

		Для каждого Метод Из ВходящиеДанные Цикл
			СвойстваМетода = Метод.Значение;
			ТелоРодителя = "";
			СвойстваМетода.Свойство("Родитель", ТелоРодителя);
			ТелоПоставки = "";
			СвойстваМетода.Свойство("Поставка", ТелоПоставки);
			ТелоРасширения = СвойстваМетода.ТелоМетода;

			Если ПоказыватьТолькоВажныеИзменения Тогда
				ТелоРодителяДляСравнения = ЗначищиеСимволы(ТелоРодителя);
				ТелоПоставкиДляСравнения = ЗначищиеСимволы(ТелоПоставки);
			Иначе
				ТелоРодителяДляСравнения = ТелоРодителя;
				ТелоПоставкиДляСравнения = ТелоПоставки;
			КонецЕсли;
			
			Если ТелоРодителяДляСравнения <> ТелоПоставкиДляСравнения Тогда
				СоздатьФайлМетода(ТелоРодителя, КаталогРодитель, ТекущийКаталог, СвойстваМетода);
				СоздатьФайлМетода(ТелоПоставки, КаталогПоставка, ТекущийКаталог, СвойстваМетода);
				СоздатьФайлМетода(ТелоРасширения, КаталогРасширение, ТекущийКаталог, СвойстваМетода);
			КонецЕсли;

		КонецЦикла;

		ТекстРезультат = ТекстОтчет;

	КонецЕсли;

	Возврат ТекстРезультат;

КонецФункции


Функция ЗначищиеСимволы(Текст)
	//ПаттернПрефикса = "\r?\n|\r|\t|(\/\/.*?$)";
	ПаттернПрефикса = "(\/\/.*?$)|\r?\n|\r|\s+(?=([^""]*""[^""]*"")*[^""]*$)";
	Регексп = Новый РегулярноеВыражение(ПаттернПрефикса);
	Возврат Регексп.Заменить(Текст, "");
КонецФункции

Процедура СоздатьКаталоги(КаталогРезультата)
	УдалитьФайлы(КаталогРезультата, "*.*");
	КаталогРодитель = ОбъединитьПути(КаталогРезультата, "Родитель");
	КаталогПоставка = ОбъединитьПути(КаталогРезультата, "Поставка");
	КаталогРасширение = ОбъединитьПути(КаталогРезультата, "Расширение");
	СоздатьКаталог(КаталогРодитель);
	СоздатьКаталог(КаталогПоставка);
	СоздатьКаталог(КаталогРасширение);
КонецПроцедуры

Процедура СоздатьФайлМетода(ТелоФайла, КаталогФайла, ПодКаталог, Метод)
	ФайлРезультат = Новый ТекстовыйДокумент;
	ФайлРезультат.УстановитьТекст(ТелоФайла);
	ЦелевойКаталог = ОбъединитьПути(КаталогФайла, ПодКаталог);
	ФайлЧтение = Новый Файл(ЦелевойКаталог);
	Если НЕ ФайлЧтение.Существует() Тогда
		СоздатьКаталог(ЦелевойКаталог);
	КонецЕсли;
	ИмяФайлаРезультата = ОбъединитьПути(ЦелевойКаталог, Метод.ИмяМетодаБезПрефикса + ".bsl");
	ФайлРезультат.Записать(ИмяФайлаРезультата, КодировкаТекста.UTF8NoBOM);
КонецПроцедуры